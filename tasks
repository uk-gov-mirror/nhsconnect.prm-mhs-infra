#!/bin/bash

set -Eeo pipefail

NHS_SERVICE=mhs
AWS_REGION=eu-west-2
AWS_DEFAULT_REGION=$AWS_REGION
IMAGE_REPO_NAME=mhs-unbound-dns

CERTIFICATES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/mhs-certs"

if [ -z "${MHS_IMAGE_TAG}" ]; then
  MHS_IMAGE_TAG="${GO_REVISION_INTEGRATION_ADAPTORS:-alpha}"
fi

if [ -z "${DNS_IMAGE_TAG}" ]; then
  DNS_IMAGE_TAG="${GO_DEPENDENCY_LABEL_DOCKER_DNS_IMAGES:-alpha}"
fi

function tf_plan {
  operation=$1

  if [ -z "${DNS_IMAGE_TAG}" ]; then
    echo "DNS_IMAGE_TAG must be set"
    exit 3
  fi

  cd terraform/
  terraform init -reconfigure -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var build_id=$MHS_IMAGE_TAG -var-file=${NHS_ENVIRONMENT}.tfvars -var-file=${NHS_ENVIRONMENT}_${CLUSTER_NAME}.tfvars -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var build_id=$MHS_IMAGE_TAG -var-file=${NHS_ENVIRONMENT}.tfvars -var-file=${NHS_ENVIRONMENT}_${CLUSTER_NAME}.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  cd terraform/
  terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json > tf-out.json
}

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function generate_csr {
  keys_file_name="$1"
  # If you intend to secure the URL https://www.yourdomain.com, then your CSRâ€™s common name must be www.yourdomain.com
  common_name="$2"
  fqdn=$common_name

  if [[ -z "$keys_file_name" ]]; then
    echo "Keys filename missing"
    exit 1
  fi
  if [[ -z "$common_name" ]]; then
    echo "domain name missing"
    exit 1
  fi

  echo "Preparing certificates for: ${keys_file_name} on ${fqdn}, common_name: ${common_name}"
  mkdir -p $CERTIFICATES_DIR

  # 1. Create a config file for generating a Certificate Signing Request (CSR).
  cat <<EOF >${CERTIFICATES_DIR}/csr.conf
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[ dn ]
CN = ${common_name}

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = ${fqdn}

[ v3_ext ]
authorityKeyIdentifier=keyid,issuer:always
basicConstraints=CA:FALSE
keyUsage=keyEncipherment,dataEncipherment
extendedKeyUsage=serverAuth,clientAuth
subjectAltName=@alt_names
EOF

  # 2. Create a private key (${keys_file_name}.key) and then generate a certificate request (${keys_file_name}.csr) from it.
  # https://www.openssl.org/docs/manmaster/man1/req.html
  openssl genrsa -out ${keys_file_name}.key 2048
  openssl req -new -key ${keys_file_name}.key -out ${keys_file_name}.csr -config ${CERTIFICATES_DIR}/csr.conf
}

function docker_login {
  echo Logging in to Amazon ECR...
  eval $(dojo "aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION")
}

function get_aws_value {
  secret_id=$1
  json=$(aws ssm get-parameter --region $AWS_DEFAULT_REGION --name $secret_id)
  if [ $? != 0 ]; then
    >&2 echo "Failed to obtain SSM value: $secret_id"
    exit 5
  fi
  echo $json | jq -r ".Parameter.Value"
}

command="$1"
case "${command}" in
  tf)
      check_env
      dojo "bash"
      ;;
  _tf_plan)
      tf_plan "$2"
      ;;
  tf_plan)
      check_env
      dojo "./tasks _tf_plan $2"
      ;;
  _tf_apply)
      tf_apply
      ;;
  tf_apply)
      check_env
      dojo "./tasks _tf_apply"
      ;;
  _nlb_ips)
      cd terraform-patch
      terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform-patch.tfstate
      if [ "$2" == "create" ]; then
        terraform apply -auto-approve -var environment=$NHS_ENVIRONMENT
      elif [ "$2" == "destroy" ]; then
        terraform destroy -var environment=$NHS_ENVIRONMENT
      fi
      ;;
  nlb_ips)
      check_env
      dojo "./tasks _nlb_ips $2"
      ;;
  _test_dns)
      check_env
      AWS_ACCOUNT_ID=$(aws sts get-caller-identity | jq -r .Account)
      DNS_SERVERS=$(get_aws_value "/repo/${NHS_ENVIRONMENT}/output/prm-mhs-infra/mhs-dns-servers")
      DNS_SERVER_1=$(echo "${DNS_SERVERS}" | awk -F "," '{print $1}')
      DNS_SERVER_2=$(echo "${DNS_SERVERS}" | awk -F "," '{print $2}')
      echo "Querying a public domain: redhat.com"
      set -x
      dig redhat.com @${DNS_SERVER_1} | grep 'Got answer'
      dig redhat.com @${DNS_SERVER_2} | grep 'Got answer'
      echo "OK. Received reply for a public domain"
      if [ "${NHS_ENVIRONMENT}" == "test" ]; then
        echo "Querying for private domain on HSCN network: nww.int.spine2.ncrs.nhs.uk"
        dig nww.int.spine2.ncrs.nhs.uk @${DNS_SERVER_1} | grep 'Got answer'
        dig nww.int.spine2.ncrs.nhs.uk @${DNS_SERVER_2} | grep 'Got answer'
        echo "OK. Received reply for an HSCN domain"
      fi
      ;;
  test_dns)
      dojo "./tasks _test_dns"
      ;;
  _wait_for_dns)
      check_env
      AWS_ACCOUNT_ID=$(aws sts get-caller-identity | jq -r .Account)
      DNS_SERVERS=$(get_aws_value "/repo/${NHS_ENVIRONMENT}/output/prm-mhs-infra/mhs-dns-servers")
      DNS_SERVER_1=$(echo "${DNS_SERVERS}" | awk -F "," '{print $1}')
      DNS_SERVER_2=$(echo "${DNS_SERVERS}" | awk -F "," '{print $2}')
      echo "Waiting for DNS servers to be ready"

      rm -f ./retry
      curl https://raw.githubusercontent.com/kadwanev/retry/master/retry -o ./retry
      chmod +x retry

      SLEEP_TIME=1
      DIG_TIMEOUT=1
      TRIES=60
      ./retry -v --tries=$TRIES --sleep=$SLEEP_TIME "1>&2 dig +timeout=$DIG_TIMEOUT redhat.com @${DNS_SERVER_1} & dig +timeout=$DIG_TIMEOUT redhat.com @${DNS_SERVER_1} | grep 'Got answer'"
      ./retry -v --tries=$TRIES --sleep=$SLEEP_TIME "1>&2 dig +timeout=$DIG_TIMEOUT redhat.com @${DNS_SERVER_2} & dig +timeout=$DIG_TIMEOUT redhat.com @${DNS_SERVER_2} | grep 'Got answer'"
      ;;
  wait_for_dns)
      dojo "./tasks _wait_for_dns"
      ;;
  _generate_certs)
      check_env
      rm -rf support
      git clone https://github.com/nhsconnect/prm-deductions-support-infra.git support
      cd support
      ./utils/generate-certs.sh -f mhs-outbound.$NHS_ENVIRONMENT -d "mhs-outbound-$NHS_ENVIRONMENT.mhs.patient-deductions.nhs.uk"
      ./utils/generate-certs.sh -f mhs-route.$NHS_ENVIRONMENT -d "mhs-route-$NHS_ENVIRONMENT.mhs.patient-deductions.nhs.uk"
      ;;
  generate_certs)
      dojo "./tasks _generate_certs"
      ;;
  _csr)
      check_env
      fqdn="mhs-inbound-$NHS_ENVIRONMENT-b86041.mhs.patient-deductions.nhs.uk"
      generate_csr "mhs-inbound-$NHS_ENVIRONMENT-b86041" $fqdn
      echo "The CSR has to be sent together with endpoint registration. Use the form below or ask endpoint admin to register it"
      echo "https://digital.nhs.uk/forms/combined-endpoint-and-service-registration-request"
      ;;
  _upload_certs)
      if [ "${NHS_ENVIRONMENT}" == "dev" ]; then
        outbound_alb_certificate_arn="arn:aws:acm:eu-west-2:327778747031:certificate/67279db0-17f9-4517-8572-eb739ae6808b"
        route_alb_certificate_arn="arn:aws:acm:eu-west-2:327778747031:certificate/3630471e-0ca2-4aec-a7f1-ef78258c8283"
      elif [ "${NHS_ENVIRONMENT}" == "test" ]; then
        outbound_alb_certificate_arn="arn:aws:acm:eu-west-2:327778747031:certificate/4289f294-49b4-4949-84ca-11cda3e84a59"
        route_alb_certificate_arn="arn:aws:acm:eu-west-2:327778747031:certificate/5eed36c1-6aba-4909-be94-b50019bb57b0"
      else
        echo "Not supported environment: '${NHS_ENVIRONMENT}'"
        # To add new env, just update this script. First-time upload should not include --certificate-arn option
        exit 2
      fi
      aws acm import-certificate \
        --certificate-arn $outbound_alb_certificate_arn \
        --region $AWS_REGION \
        --certificate file://support/utils/site-certs/mhs-outbound.$NHS_ENVIRONMENT.crt \
        --private-key file://support/utils/site-certs/mhs-outbound.$NHS_ENVIRONMENT.key \
        --certificate-chain file://support/utils/site-certs/ca.crt
      aws acm import-certificate \
        --certificate-arn $route_alb_certificate_arn \
        --region $AWS_REGION \
        --certificate file://support/utils/site-certs/mhs-route.$NHS_ENVIRONMENT.crt \
        --private-key file://support/utils/site-certs/mhs-route.$NHS_ENVIRONMENT.key \
        --certificate-chain file://support/utils/site-certs/ca.crt
      ;;
  upload_certs)
      dojo "./tasks _upload_certs"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
